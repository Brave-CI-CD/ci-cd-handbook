name: CD Pipeline to Google Cloud Run (staging and production)
on:
  workflow_dispatch:
  release:
    types: published
  push:
    branches:
      - staging

env:
  PORT: 5001
  IMAGE: ${{vars.IMAGE}}:${{github.sha}}
jobs:
  test:
    runs-on: ubuntu-latest
    name: Setup, test, and build project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Test application
        run: npm test
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Setup project, Authorize GitHub Actions to GCP and Docker Hub, and deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate for GCP
        id: gcp-auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Authenticate for Docker Hub
        id: docker-auth
        env:
          D_USER: ${{secrets.DOCKER_USER}}
          D_PASS: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $D_USER -p $D_PASS

      - name: Build and tag Image
        run: |
          docker build -t ${{env.IMAGE}} .

      - name: Push the image to Docker hub
        run: |
          docker push ${{env.IMAGE}}

      - name: Enable the Billing API
        run: |
          gcloud services enable cloudbilling.googleapis.com --project=${{secrets.GCP_PROJECT_ID}}

      - name: Deploy to GCP Run - Production environment (If a new release was published from the master branch)
        if: github.event_name == 'release' && github.event.action == 'published' && github.event.release.target_commitish == 'main'
        run: |
          gcloud run deploy ${{vars.GCR_PROJECT_NAME}} \
          --region ${{vars.GCR_REGION}} \
          --image ${{env.IMAGE}} \
          --platform "managed" \
          --allow-unauthenticated \
          --revision-suffix=prod-${{github.sha}}

      - name: Check if Service Exists
        id: check-service
        run: |
          if gcloud run services describe ${{ vars.GCR_PROJECT_NAME }} --region=${{ vars.GCR_REGION }} --platform managed > /dev/null 2>&1; then
            echo "FUNCTION_EXISTS=1" >> $GITHUB_ENV
          else
            echo "FUNCTION_EXISTS=0" >> $GITHUB_ENV
          fi

      - name: Deploy to GCP Run - Staging environment (If a push was made to the staging branch, e.g. from a successful PR, AND the Service previously exists i.e. Update)
        if: github.ref != 'refs/heads/main' && env.FUNCTION_EXISTS == 1
        run: |
          echo "Service exists. Deploying and setting traffic to 0%."

          # Deploy service with no traffic
          gcloud run deploy ${{vars.GCR_PROJECT_NAME}} \
          --region ${{vars.GCR_REGION}} \
          --image ${{env.IMAGE}} \
          --platform "managed" \
          --allow-unauthenticated \
          --no-traffic \
          --tag staging \
          --revision-suffix=staging-${{github.sha}}

      - name: Deploy to GCP Run - Staging environment (If a push was made to the staging branch, e.g. from a successful PR, AND the Service doesn't exist i.e. Initial deploy)
        if: github.ref != 'refs/heads/main' && env.FUNCTION_EXISTS == 0
        run: |
          echo "Service does not exist. Deploying and setting traffic to 0."

          # Deploy service without --no-traffic for initial creation
          gcloud run deploy ${{ vars.GCR_PROJECT_NAME }} \
            --region=${{ vars.GCR_REGION }} \
            --image=${{ env.IMAGE }} \
            --platform="managed" \
            --allow-unauthenticated \
            --tag staging \
            --revision-suffix=staging-${{github.sha}}

          # Immediately update traffic to 0 after deployment
          gcloud run services update-traffic ${{ vars.GCR_PROJECT_NAME }} \
            --region=${{ vars.GCR_REGION }} \
            --to-latest=0
